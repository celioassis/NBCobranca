///////////////////////////////////////////////////////////
//  LimEntidades.cs
//  Implementation of the Class LimEntidades
//  Generated by Enterprise Architect
//  Created on:      22-fev-2005 17:03:03
///////////////////////////////////////////////////////////




using System;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Data;
using System.Collections.Generic;
using System.Text;
using NBCobranca.Tipos;
using NBArvore;

namespace NBCobranca.Classes
{
    public class LimEntidades : IDisposable
    {
        protected NBdbm.Fachadas.plxCOBR.CadastroEntidade aCadEntidade;
        protected Sistema aParent;
        private string aSource = "";
        protected string aID;
        protected string aIDEntidadeDuplicada = "0";
        protected double aIdExclusao = 0;
        protected string aKeyNome = ""; //Atributo usado para a Verificação da Mudança de Chave
        protected string aKeyCPF_CNPJ = "";//Idem
        protected string aValorPesquisa;
        protected string[] aChaveTmpArray = new string[5]; //Atributo usado para receber Chaves de Coleções entre Posts.
        protected string aChaveTmp = "";
        protected string aCampoRecebeFoco = ""; //Atributo usado para informar o campo que ira receber o foco após um Post.
        protected string aXmPathAtual = "";
        protected bool aAlteracao = false;
        protected bool aAlteraEndereco = false;
        protected bool aAlteraTelefone = false;
        protected bool aAlteraEmail = false;
        protected bool aAlteraUrl = false;
        protected bool aAlteraDivida = false;
        protected System.Data.DataView aDataSourceTipoDivida;
        protected Tipos.TipoPesquisa aTipoPesqAtual;
        protected Tipos.TipoPessoa aTipoPessoaAtual = TipoPessoa.Todas;
        protected System.Collections.Hashtable aTmpObjExcluir = new System.Collections.Hashtable();
        protected relatorio aRelatorio;
        protected System.Collections.Hashtable aSortedLists = new System.Collections.Hashtable();
        protected NBdbm.self aSelf;

        public LimEntidades(Sistema pParent)
        {
            this.aParent = pParent;
            this.aSelf = pParent.Self;
        }
        /// <summary>
        /// Propriedade que retorna o objeto Entidade
        /// </summary>
        public NBdbm.Interfaces.iCTR.Primitivas.iEntidade Entidade
        {
            get
            {
                return aCadEntidade.Entidade;
            }
        }
        public NBdbm.Fachadas.plxCOBR.CadastroEntidade CadEntidade
        {
            get
            {
                if (aCadEntidade == null)
                    aCadEntidade = new NBdbm.Fachadas.plxCOBR.CadastroEntidade(aParent.LimLogin.TipoConexao, (NBdbm.tipos.TipoEntidade)aParent.TipoEntidade, false);
                return this.aCadEntidade;
            }
        }
        /// <summary>
        /// Propriedade que Retorna o Objeto Retorno após executar o
        /// método Salvar da Entidade, o qual grava os dados da entidade 
        /// no banco de dados.
        /// </summary>
        public virtual void Salvar()
        {
            if (this.CadEntidade.Entidade.ID > 0)
                this.aAlteracao = true;
            else
                this.aAlteracao = false;

            if (this.aParent.TipoEntidade != NBdbm.tipos.TipoEntidade.Devedores)
                this.CadEntidade.xmPath_LinkEntNo = "<Entidades><" + this.aParent.TipoEntidade.ToString() + ">";

            VerificaMudancaChave();
            try
            {
                if (!this.aAlteracao && this.aParent.TipoEntidade == NBdbm.tipos.TipoEntidade.Clientes)
                {
                    string NomeNo = this.CadEntidade.Entidade.NomeRazaoSocial_key;

                    this.aParent.BusClasses.CriarFilho("Entidades\\Carteiras\\", NomeNo);
                    this.aParent.BusClasses.CriarFilho("Borderos\\", NomeNo);
                    this.aParent.BusClasses.SalvarArvore();
                }
                foreach (NBdbm.Interfaces.Primitivas.iAllClass objExcluir in this.aTmpObjExcluir.Values)
                    objExcluir.excluir(false);

                this.CadEntidade.Salvar(false);
                this.aTmpObjExcluir.Clear();
            }
            catch (NBdbm.NBexception nbEx)
            {
                throw new NBdbm.COBR_Exception(nbEx);
            }
            catch (Exception ex)
            {
                throw new NBdbm.COBR_Exception(ex);
            }

        }

        protected void VerificaMudancaChave()
        {
            if ((aKeyNome != "" && aKeyNome != this.CadEntidade.Entidade.NomeRazaoSocial_key) || (this.aKeyCPF_CNPJ != "" && this.aKeyCPF_CNPJ != this.CadEntidade.Entidade.CPFCNPJ_key))
            {
                NBdbm.Fachadas.CTR.primitivas.Entidade mEntidade = new NBdbm.Fachadas.CTR.primitivas.Entidade(ref aSelf, this.aParent.LimLogin.TipoConexao, true);
                mEntidade.campos = this.CadEntidade.Entidade;
                mEntidade.filterWhere = "idEntidade=" + aID;
                mEntidade.editar(false);
            }
        }
        /// <summary>
        /// Propriedade que retorna o objeto Endereco da this.CadEntidade.
        /// </summary>
        public NBdbm.Interfaces.iCTR.Primitivas.iEndereco Endereco
        {
            get
            {
                return this.CadEntidade.Endereco;
            }
        }
        /// <summary>
        /// Propriedade que retorna o objeto Telefone da this.CadEntidade.
        /// </summary>
        public NBdbm.Interfaces.iCTR.Primitivas.iTelefone Telefone
        {
            get
            {
                return this.CadEntidade.Telefone;
            }
        }
        /// <summary>
        /// Propriedade que retorna o objeto email da this.CadEntidade.
        /// </summary>
        public NBdbm.Interfaces.iCTR.Primitivas.iEmail Email
        {
            get
            {
                return this.CadEntidade.eMail;
            }
        }
        /// <summary>
        /// Propriedade que retorna o objeto url da this.CadEntidade.
        /// </summary>
        public NBdbm.Interfaces.iCTR.Primitivas.iUrl Site
        {
            get
            {
                return this.CadEntidade.Url;
            }
        }
        /// <summary>
        /// Retorna o objeto Dívida.
        /// </summary>
        public NBdbm.Interfaces.iCOBR.Primitivas.iDivida Divida
        {
            get
            {
                return this.CadEntidade.Divida;
            }
            set
            {
                this.CadEntidade.Divida = value;
            }
        }
        /// <summary>
        /// Retorna um Objeto do Tipo Tarifas.
        /// </summary>
        public NBdbm.Interfaces.iCOBR.Primitivas.iTarifas Tarifas
        {
            get
            {
                return this.CadEntidade.Tarifa;
            }
        }
        /// <summary>
        /// Retorna um DataView com Maior Nível de Detalhamento
        /// </summary>
        /// <param name="TipoPesq">
        /// Tipo da Pesquisa, Ex: é por ID, Nome, CPF ou Cidade
        /// </param>
        /// <param name="TipoPess">
        /// Tipo da Pessoa, Ex: é Fisica ou Jurídica
        /// </param>
        /// <param name="TipoEnti">
        /// Tipo da Entidade: Ex: é um Cliente, Fornecedor ou Funcionário
        /// </param>
        /// <param name="Valor">
        /// Valor de Pesquisa: Ex: o Número do ID, Nome da Pessoa, Número do CPF 
        /// ou o Nome da Cidade
        /// </param>
        /// <param name="XmPath">
        /// Valor da Pasta Selecionada: Ex: <Entidades><Carteiras>
        /// </param>
        /// <returns>
        /// Retorna um DataView com os Seguintes Campos:
        /// idEntidade, NomePrimary, Logradouro, Municipio e o UF
        /// </returns>
        public System.Data.DataView DataSource(Tipos.TipoPesquisa TipoPesq, Tipos.TipoPessoa TipoPess, string Valor, string XmPath)
        {
            return DataSource(WherePesq(TipoPesq, TipoPess, Valor, XmPath));
        }
        /// <summary>
        /// Retorna um DataView com Maior Nível de Detalhamento
        /// </summary>
        /// <param name="TipoPesq">
        /// Tipo da Pesquisa, Ex: é por ID, Nome, CPF ou Cidade
        /// </param>
        /// <param name="TipoPess">
        /// Tipo da Pessoa, Ex: é Fisica ou Jurídica
        /// </param>
        /// <param name="TipoEnti">
        /// Tipo da Entidade: Ex: é um Cliente, Fornecedor ou Funcionário
        /// </param>
        /// <param name="Valor">
        /// Valor de Pesquisa: Ex: o Número do ID, Nome da Pessoa, Número do CPF 
        /// ou o Nome da Cidade
        /// </param>
        /// <returns>
        /// Retorna um DataView com os Seguintes Campos:
        /// idEntidade, NomePrimary, Logradouro, Municipio e o UF
        /// </returns>
        public System.Data.DataView DataSource(Tipos.TipoPesquisa TipoPesq, Tipos.TipoPessoa TipoPess, string Valor)
        {
            return DataSource(WherePesq(TipoPesq, TipoPess, Valor, this.xmpath));
        }
        /// <summary>
        /// Retorna um Dataview Pré-Definido para Funcionários
        /// </summary>
        /// <param name="TipoPesq">
        /// Tipo da Pesquisa, Ex: é por ID, Nome, CPF ou Cidade
        /// </param>
        /// <param name="Valor">
        /// Valor de Pesquisa: Ex: o Número do ID, Nome da Pessoa, Número do CPF 
        /// ou o Nome da Cidade
        /// </param>
        /// <returns>
        /// Retorna um DataView com os Seguintes Campos:
        /// idEntidade, NomePrimary, Logradouro, Municipio e o UF
        /// </returns>
        public System.Data.DataView DataSource(Tipos.TipoPesquisa TipoPesq, string Valor)
        {
            return DataSource(WherePesq(TipoPesq, Tipos.TipoPessoa.Fisica, Valor, this.xmpath));
        }
        /// <summary>
        /// DataView para Uso das propriedades TipoPesqAtual e TipoPessoaAtual
        /// uso padrão para Cadastro de funcionários.
        /// </summary>
        /// <param name="valor">
        /// Valor que será usando para filtrar a pesquisa.
        /// </param>
        /// <returns>DataView</returns>
        public System.Data.DataView DataSource(string pXmPath)
        {
            return this.DataSource(this.aTipoPesqAtual, this.aTipoPessoaAtual, this.aValorPesquisa, pXmPath);
        }
        /// <summary>
        /// DataView para Uso das propriedades TipoPesqAtual, TipoPessoaAtual e
        /// ValorPesquisa
        /// </summary>
        /// <returns></returns>
        public System.Data.DataView DataSource()
        {
            return this.DataSource(this.aTipoPesqAtual, this.aTipoPessoaAtual, this.aValorPesquisa);
        }
        /// <summary>
        /// DataView para os Demais DataSource
        /// </summary>
        /// <param name="SqlWhere">
        /// Paramentro que Filtro a Pesquisa
        /// </param>
        /// <returns>
        /// Retorna um DataView com os Seguintes Campos:
        /// idEntidade, NomePrimary, Logradouro, Municipio e o UF
        /// </returns>

        private System.Data.DataView DataSource(System.Text.StringBuilder SqlWhere)
        {
            //SQL que Retorna todas os Registros de uma entidade, como por ex: 
            //Todos os Clientes, Fornecedores ou Funcionários, conforme o parametro 
            //sqlWhere.
            string comandoSQL = strSQL;
            //Cria-se um novo DataSet para receber os dados da pesquisa.
            System.Data.DataSet DS = new System.Data.DataSet();
            //Concatena o comandoSQL com o sqlWhere + outras funcionálidades do comando SQL.
            comandoSQL += SqlWhere;
            //Cria-se um DataAdapter para receber o comando sql que ira fazer a consulta.
            System.Data.SqlClient.SqlDataAdapter DA;
            //Instancia-se o DataAdapter com o ComandoSQL e a conexão com o Banco de Dados.
            DA = new System.Data.SqlClient.SqlDataAdapter(comandoSQL, (System.Data.SqlClient.SqlConnection)this.aParent.Connection);
            //Preenche o DataSet.
            DA.Fill(DS);
            //Retorna o DataView o mesmo será mostrado em uma DataGrid.
            return DS.Tables[0].DefaultView;
        }
        public void FillDataGrid(System.Web.UI.WebControls.DataGrid pDataGrid, string pXmPath, int pCurrentPage)
        {
            //SQL que Retorna todas os Registros de uma entidade, como por ex: 
            //Todos os Clientes, Fornecedores ou Funcionários, conforme o parametro 
            //sqlWhere.
            string comandoSQL = strSQL;
            //Cria-se um novo DataSet para receber os dados da pesquisa.
            System.Data.DataSet DS = new System.Data.DataSet();

            //Concatena o comandoSQL com o sqlWhere + outras funcionálidades do comando SQL.
            comandoSQL += this.WherePesq(this.aTipoPesqAtual, this.aTipoPessoaAtual, this.aValorPesquisa, pXmPath);

            System.Data.SqlClient.SqlCommand mSqlCmd;

            mSqlCmd = NBFuncoes.SqlCmdPaginacao(comandoSQL, "IdEntidade", 1, pCurrentPage, pDataGrid.PageSize, this.aParent.LimLogin.TipoConexao);
            //Cria-se um DataAdapter para receber o comando sql que ira fazer a consulta.
            System.Data.SqlClient.SqlDataAdapter DA;
            //Instancia-se o DataAdapter com o ComandoSQL e a conexão com o Banco de Dados.
            DA = new System.Data.SqlClient.SqlDataAdapter(mSqlCmd);
            //Preenche o DataSet.
            DA.Fill(DS);
            pDataGrid.VirtualItemCount = ((int)mSqlCmd.Parameters["@ROWS_TOTAL"].Value);
            if (DS.Tables.Count == 0)
            {
                DA = new System.Data.SqlClient.SqlDataAdapter(comandoSQL, (System.Data.SqlClient.SqlConnection)this.aParent.Connection);
                DA.Fill(DS);
            }
            pDataGrid.DataSource = DS.Tables[0].DefaultView;
            pDataGrid.DataBind();
        }

        public DataTable LoadEntidades(string pXmPath, int pCurrentPage, int pPageSize, ref int pTotalRegistros)
        {
            //SQL que Retorna todas os Registros de uma entidade, como por ex: 
            //Todos os Clientes, Fornecedores ou Funcionários, conforme o parametro 
            //sqlWhere.
            string comandoSQL = strSQL;
            //Cria-se um novo DataSet para receber os dados da pesquisa.
            System.Data.DataSet DS = new System.Data.DataSet();

            //Concatena o comandoSQL com o sqlWhere + outras funcionálidades do comando SQL.
            comandoSQL += this.WherePesq(this.aTipoPesqAtual, this.aTipoPessoaAtual, this.aValorPesquisa, pXmPath);

            System.Data.SqlClient.SqlCommand mSqlCmd;

            mSqlCmd = NBFuncoes.SqlCmdPaginacao(comandoSQL, "IdEntidade", 1, pCurrentPage, pPageSize, this.aParent.LimLogin.TipoConexao);
            //Cria-se um DataAdapter para receber o comando sql que ira fazer a consulta.
            System.Data.SqlClient.SqlDataAdapter DA;
            //Instancia-se o DataAdapter com o ComandoSQL e a conexão com o Banco de Dados.
            DA = new System.Data.SqlClient.SqlDataAdapter(mSqlCmd);
            //Preenche o DataSet.
            DA.Fill(DS);
            pTotalRegistros = Convert.ToInt32(mSqlCmd.Parameters["@ROWS_TOTAL"].Value);
            if (DS.Tables.Count == 0)
                return null;
            else
                return DS.Tables[0];
        }

        /// <summary>
        /// WherePesq - Gera uma string com um filtro para uma SQL de Pesquisa
        /// </summary>
        /// <param name="TipoPesq">
        /// Tipo da Pesquisa, Ex: é por ID, Nome, CPF ou Cidade
        /// </param>
        /// <param name="TipoPess">
        /// Tipo da Pessoa, Ex: é Fisica ou Jurídica
        /// </param>
        /// <param name="TipoEnti">
        /// Tipo da Entidade: Ex: é um Cliente, Fornecedor ou Funcionário
        /// </param>
        /// <param name="Valor">
        /// Valor de Pesquisa: Ex: o Número do ID, Nome da Pessoa, Número do CPF 
        /// ou o Nome da Cidade
        /// </param>
        /// <returns>
        /// Retorna uma String contendo a instrução Where para um Comando SQL.
        /// </returns>
        private System.Text.StringBuilder WherePesq(Tipos.TipoPesquisa TipoPesq, Tipos.TipoPessoa TipoPess, string Valor, string XmPath)
        {
            System.Text.StringBuilder sqlWhere = new System.Text.StringBuilder();
            //Cria-se duas novas variáveis do tipo string, uma para receber o Comando Where e outra 
            //para receber o Tipo da Pessoa se é Física ou Jurídica.
            /*
( 
											FROM CTRL_Enderecos 
											
											)              
             */
            sqlWhere.Append("WHERE (dbo.CTRL_Enderecos.IdEndereco = ");
            sqlWhere.Append("(SELECT Top 1 IdEndereco ");
            sqlWhere.Append("FROM CTRL_Enderecos ");
            sqlWhere.Append("Where CTRL_Enderecos.IdEntidade = CTRL_Entidades.IdEntidade ");
            sqlWhere.Append("Order by IdEndereco Asc)) AND ");
            string sqlTipoPessoa = "";
            //Verifica se o Tipo da Pessoa é diferente do Tipo Todas, isso significa que 
            //só poderá ser Física ou Jurídica.
            if (TipoPess != Tipos.TipoPessoa.Todas)
            {
                //Atribui o Valor do tipo de pesquisa à sqlTipoPessoa a qual será também concatenada a 
                //string sqlWhere.
                sqlTipoPessoa = "CTRL_Entidades.PessoaFJ=" + ((int)TipoPess).ToString() + " and ";
            }
            //Verifica os Tipos de Pesquisa que podem ser por ID, Nome, CPF ou Cidade.
            switch (TipoPesq)
            {
                case Tipos.TipoPesquisa.ID:
                    {
                        if (Valor == "")
                            Valor = "0";
                        sqlWhere.Append(sqlTipoPessoa + "CTRL_Entidades.IdEntidade=" + Valor);
                    }
                    break;

                case Tipos.TipoPesquisa.Nome:
                    {
                        sqlWhere.Append(sqlTipoPessoa);
                        sqlWhere.Append("CTRL_Entidades.NomePrimary Like '" + Valor + "%'");
                    }
                    break;

                case Tipos.TipoPesquisa.CPF:
                    if (Valor == "")
                        Valor = "0";
                    sqlWhere.Append(sqlTipoPessoa);
                    sqlWhere.Append("CTRL_CPFCNPJ.CPFCNPJ='" + Valor + "'");
                    break;

                case Tipos.TipoPesquisa.Cidade:
                    sqlWhere.Append(sqlTipoPessoa);
                    sqlWhere.Append("CTRL_Enderecos.Municipio Like '" + Valor + "%'");
                    break;
            }
            sqlWhere.Append(" AND (dbo.CTRL_Nos.XmPath LIKE '" + XmPath + "%')");
            sqlWhere.Append(" GROUP BY dbo.CTRL_Entidades.IdEntidade,");
            sqlWhere.Append(" dbo.CTRL_Entidades.NomePrimary, dbo.CTRL_Enderecos.Logradouro,");
            sqlWhere.Append(" dbo.CTRL_Enderecos.Municipio, dbo.CTRL_Enderecos.UF");
            return sqlWhere;
        }
        private string strSQL
        {
            get
            {
                string SQL_Entidades = "" +
                    "SELECT dbo.CTRL_Entidades.IdEntidade, dbo.CTRL_Entidades.NomePrimary, dbo.CTRL_Enderecos.Logradouro, dbo.CTRL_Enderecos.Municipio, dbo.CTRL_Enderecos.UF " +
                    "FROM dbo.CTRL_Entidades " +
                    "INNER JOIN dbo.CTRL_Enderecos ON dbo.CTRL_Entidades.IdEntidade = dbo.CTRL_Enderecos.IdEntidade " +
                    "INNER JOIN dbo.CTRL_Link_Entidade_No ON dbo.CTRL_Entidades.IdEntidade = dbo.CTRL_Link_Entidade_No.IdEntidade " +
                    "INNER JOIN dbo.CTRL_Nos ON dbo.CTRL_Link_Entidade_No.IdNo = dbo.CTRL_Nos.IdNo " +
                    "INNER JOIN dbo.CTRL_CPFCNPJ ON dbo.CTRL_Entidades.idCPFCNPJ = dbo.CTRL_CPFCNPJ.idCPFCNPJ ";


                return SQL_Entidades;

            }
        }
        /// <summary>
        /// Retorna uma String com o XmPath conforme o tipo da this.CadEntidade.
        /// </summary>
        private string xmpath
        {
            get
            {
                switch (this.aParent.TipoEntidade)
                {
                    case NBdbm.tipos.TipoEntidade.Clientes:
                        return "<Entidades><Clientes>";
                    case NBdbm.tipos.TipoEntidade.Funcionários:
                        return "<Entidades><Funcionários>";
                    case NBdbm.tipos.TipoEntidade.Devedores:
                        return "<Entidades><Carteiras>";
                    default:
                        return "<Entidades>";
                }
            }
        }
        /// <summary>
        /// Consulta de Entidade (Clientes ou Fornecedores) conforme o seu 
        /// número de Identificação.
        /// </summary>
        /// <param name="idEntidade">
        /// Número de Identificação (idEntidade ou ID)
        /// </param>
        public virtual void Consulta(string idEntidade)
        {
            double mIdEntidadeConsultada = Convert.ToDouble(idEntidade);
            this.aTmpObjExcluir.Clear();
            //Executa o metodo getFieldsFromEntidade, o qual ira popular todos 
            //os objetos da entidade (Clientes ou Fornecedores), como Dados 
            //Pessoais, Endereço, Telefones, Emails, etc...
            this.CadEntidade.getFieldsFromEntidade(mIdEntidadeConsultada);
            //Popula a variável ID com o ID da this.CadEntidade.
            aID = this.CadEntidade.Entidade.ID.ToString();
            aKeyNome = this.CadEntidade.Entidade.NomeRazaoSocial_key;
            this.aKeyCPF_CNPJ = this.CadEntidade.Entidade.CPFCNPJ_key;

            if (this.CadEntidade.Endereco.ID > 0)
            {
                this.aAlteraEndereco = true;
                this.aChaveTmpArray[0] = this.Endereco.Key;
            }

            if (this.CadEntidade.Telefone.ID > 0)
            {
                this.aAlteraTelefone = true;
                this.aChaveTmpArray[1] = this.Telefone.Key;
            }

            if (this.CadEntidade.eMail.ID > 0)
            {
                this.aAlteraEmail = true;
                this.aChaveTmpArray[2] = this.Email.Key;
            }
            if (this.CadEntidade.Url.ID > 0)
            {
                this.aAlteraUrl = true;
                this.aChaveTmpArray[3] = this.Site.Key;
            }

            if (this.CadEntidade.Divida.ID > 0)
            {
                this.aAlteraDivida = true;
                this.aChaveTmpArray[4] = this.Divida.Key;
            }

            if (this.aParent.TipoEntidade == NBdbm.tipos.TipoEntidade.Devedores)
            {
                if (this.CadEntidade.xmPath_LinkEntNo != this.aXmPathAtual && this.aXmPathAtual != "")
                    this.CadEntidade.xmPath_LinkEntNo = this.aXmPathAtual;
            }

        }
        /// <summary>
        /// Limpa Todas as Coleções
        /// </summary>
        protected void LimpaColecoesNB()
        {
            this.CadEntidade.colecaoEmail.Clear();
            this.CadEntidade.colecaoEnderecos.Clear();
            this.CadEntidade.colecaoTelefones.Clear();
            this.CadEntidade.colecaoUrl.Clear();
            this.CadEntidade.colecaoDividas.Clear();
            this.CadEntidade.Entidade.Clear_vars();

        }

        /// <summary>
        /// Adiciona Objetos dos Tipos: Endereco, Telefone, Email e URL(Site) 
        /// em suas respectivas coleções.
        /// </summary>
        /// <param name="Objeto">
        /// Objetos dos Tipos: Endereco, Telefone, Email e URL(Site).
        /// </param>
        public void ColecaoAdd(Tipos.TipoColecoes tipoColecao)
        {

            switch (tipoColecao)
            {
                case Tipos.TipoColecoes.Endereco:
                    if (this.Endereco.Logradouro_key == "")
                        return;
                    try
                    {
                        if (!this.aAlteraEndereco && !this.CadEntidade.colecaoEnderecos.Contains(this.Endereco.Key))
                        {
                            this.CadEntidade.colecaoEnderecos.Add(this.Endereco.Key, this.Endereco);
                            if (this.CadEntidade.colecaoEnderecos.Count == 1)
                                this.CadEntidade.Endereco = this.Endereco;
                        }
                        if (this.aAlteraEndereco && this.aChaveTmpArray[0] != this.Endereco.Key)
                        {
                            this.CadEntidade.colecaoEnderecos.Remove(this.aChaveTmpArray[0]);
                            this.CadEntidade.colecaoEnderecos.Add(this.Endereco.Key, this.Endereco);
                        }
                        else
                            this.aAlteraEndereco = false;
                    }
                    catch (System.Exception ex)
                    {
                        throw new NBdbm.COBR_Exception("Este Endereço já foi cadastrado", aSource, ex);
                    }
                    break;

                case Tipos.TipoColecoes.Telefone:
                    if (this.Telefone.Fone_key == "")
                        return;
                    try
                    {
                        if (!this.aAlteraTelefone && !this.CadEntidade.colecaoTelefones.Contains(this.Telefone.Key))
                            this.CadEntidade.colecaoTelefones.Add(this.Telefone.Key, this.Telefone);
                        if (this.aAlteraTelefone && this.aChaveTmpArray[1] != this.Telefone.Key)
                        {
                            this.CadEntidade.colecaoTelefones.Remove(this.aChaveTmpArray[1]);
                            this.CadEntidade.colecaoTelefones.Add(this.Telefone.Key, this.Telefone);
                        }
                        else
                            this.aAlteraTelefone = false;
                    }
                    catch (System.Exception ex)
                    {
                        throw new NBdbm.COBR_Exception("Este Número de Telefone Já foi cadastrado", aSource, ex);
                    }
                    break;

                case Tipos.TipoColecoes.Email:
                    if (this.Email.eMail_key == "")
                        return;
                    try
                    {
                        if (!this.aAlteraEmail && !this.CadEntidade.colecaoEmail.Contains(this.Email.Key))
                            this.CadEntidade.colecaoEmail.Add(this.Email.Key, this.Email);

                        if (this.aAlteraEmail && this.aChaveTmpArray[2] != this.Email.Key)
                        {
                            this.CadEntidade.colecaoEmail.Remove(this.aChaveTmpArray[2]);
                            this.CadEntidade.colecaoEmail.Add(this.Email.Key, this.Email);
                        }
                        else
                            this.aAlteraEmail = false;
                    }
                    catch (System.Exception ex)
                    {
                        throw new NBdbm.COBR_Exception("Este e-mail já foi cadastrado", aSource, ex);
                    }

                    break;

                case Tipos.TipoColecoes.Site:
                    if (this.Site.Url_key == "")
                        return;

                    try
                    {
                        if (!this.aAlteraUrl && !this.CadEntidade.colecaoUrl.Contains(this.Site.Key))
                            this.CadEntidade.colecaoUrl.Add(this.Site.Key, this.Site);
                        if (this.aAlteraUrl && this.aChaveTmpArray[3] != this.Site.Key)
                        {
                            this.CadEntidade.colecaoUrl.Remove(this.aChaveTmpArray[3]);
                            this.CadEntidade.colecaoUrl.Add(this.Site.Key, this.Site);
                        }
                        else
                            this.aAlteraUrl = false;
                    }
                    catch (System.Exception ex)
                    {
                        throw new NBdbm.COBR_Exception("Este Site já foi cadastrado", aSource, ex);
                    }
                    break;

                case Tipos.TipoColecoes.Dividas:
                    if (this.Divida.Key == "")
                        return;
                    try
                    {
                        if (!this.aAlteraDivida && !this.aCadEntidade.colecaoDividas.Contains(this.Divida.Key))
                        {
                            if (this.CadEntidade.Divida.XmPathCliente == "")
                                this.CadEntidade.Divida.XmPathCliente = this.CadEntidade.xmPath_LinkEntNo;
                            this.CadEntidade.colecaoDividas.Add(this.Divida.Key, this.Divida);
                        }
                        if (this.aAlteraDivida && this.aChaveTmpArray[4] != this.Divida.Key)
                        {
                            this.CadEntidade.colecaoDividas.Remove(this.aChaveTmpArray[4]);
                            this.CadEntidade.colecaoDividas.Add(this.Divida.Key, this.Divida);
                        }
                        else
                            this.aAlteraDivida = false;
                    }
                    catch (System.Exception ex)
                    {
                        throw new NBdbm.COBR_Exception("Esta Dívida já foi cadastrada", aSource, ex);
                    }
                    break;
            }

        }
        /// <summary>
        /// Busca um Objeto dos Tipos: Endereco, Telefone, Email e Site para 
        /// o mesmo objeto da entidade, por exemplo: um Endereco da coleção de
        /// enderecos será referenciado na this.CadEntidade.Endereco, dessa forma será 
        /// possivel acessar os atributos desse endereço. 
        /// </summary>
        /// <param name="TipoCampo">
        /// Tipo dos Objetos que serão retornados das Respectivas Coleções 
        /// por exemplo: TipoCampo.Endereco, TipoCampo.Telefone, TipoCampo.Email ]
        /// e TipoCampo.Site.
        /// </param>
        /// <param name="Chave">
        /// String pela Qual poderá ser localizado o objeto na Coleção.
        /// </param>
        public void ColecaoGet(Tipos.TipoColecoes TipoCampo, string Chave)
        {
            switch (TipoCampo)
            {
                case Tipos.TipoColecoes.Endereco:
                    //Faz um Casting na Coleção do Tipo iEndereco para que o mesmo possa ser
                    //referenciado na mEntidade.Endereco
                    this.aAlteraEndereco = true;
                    this.CadEntidade.Endereco = (NBdbm.Interfaces.iCTR.Primitivas.iEndereco)this.CadEntidade.colecaoEnderecos[Chave];
                    this.aChaveTmpArray[0] = this.CadEntidade.Endereco.Key;
                    break;
                case Tipos.TipoColecoes.Telefone:
                    //Segue o mesmo procedimento do Endereco.
                    this.aAlteraTelefone = true;
                    this.CadEntidade.Telefone = null;
                    this.CadEntidade.Telefone = this.CadEntidade.colecaoTelefones[Chave] as NBdbm.Interfaces.iCTR.Primitivas.iTelefone;
                    this.aChaveTmpArray[1] = this.CadEntidade.Telefone.Key;
                    break;
                case Tipos.TipoColecoes.Email:
                    //Segue o mesmo procedimento do Endereco.
                    this.aAlteraEmail = true;
                    this.CadEntidade.eMail = (NBdbm.Interfaces.iCTR.Primitivas.iEmail)this.CadEntidade.colecaoEmail[Chave];
                    this.aChaveTmpArray[2] = this.CadEntidade.eMail.Key;
                    break;
                case Tipos.TipoColecoes.Site:
                    //Segue o mesmo procedimento do Endereco.
                    this.aAlteraUrl = true;
                    this.CadEntidade.Url = (NBdbm.Interfaces.iCTR.Primitivas.iUrl)this.CadEntidade.colecaoUrl[Chave];
                    this.aChaveTmpArray[3] = this.CadEntidade.Url.Key;
                    break;
                case Tipos.TipoColecoes.Dividas:
                    //Segue o mesmo procedimento do Endereco.
                    this.aAlteraDivida = true;
                    this.CadEntidade.Divida = (NBdbm.Interfaces.iCOBR.Primitivas.iDivida)this.CadEntidade.colecaoDividas[Chave];
                    this.aChaveTmpArray[4] = this.CadEntidade.Divida.Key;
                    break;
            }
        }
        public string ColecaoBuscaKey(Tipos.TipoColecoes tipoColecao, int Index)
        {
            return ((System.Collections.SortedList)aSortedLists[tipoColecao]).GetKey(Index) as string;
        }
        /// <summary>
        /// Exclui um Objeto dos Tipos: Endereco, Telefone, Email e Site 
        /// conforme o seu tipo e a Chave.
        /// </summary>
        /// <param name="TipoCampo">
        /// Tipo dos Objetos que serão excluidos das Respectivas Coleções 
        /// por exemplo: TipoCampo.Endereco, TipoCampo.Telefone, TipoCampo.Email ]
        /// e TipoCampo.Site.
        /// </param>
        /// <param name="Chave">
        /// String pela Qual poderá ser localizado o objeto na Coleção.
        /// </param>
        public void ColecaoRemove(Tipos.TipoColecoes TipoCampo, string Chave)
        {
            switch (TipoCampo)
            {
                case Tipos.TipoColecoes.Endereco:
                    this.TmpExcluirAdd(this.CadEntidade.colecaoEnderecos[Chave]);
                    this.CadEntidade.colecaoEnderecos.Remove(Chave);
                    break;
                case Tipos.TipoColecoes.Telefone:
                    this.TmpExcluirAdd(this.CadEntidade.colecaoTelefones[Chave]);
                    this.CadEntidade.colecaoTelefones.Remove(Chave);
                    break;
                case Tipos.TipoColecoes.Email:
                    this.TmpExcluirAdd(this.CadEntidade.colecaoEmail[Chave]);
                    this.CadEntidade.colecaoEmail.Remove(Chave);
                    break;
                case Tipos.TipoColecoes.Site:
                    this.TmpExcluirAdd(this.CadEntidade.colecaoUrl[Chave]);
                    this.CadEntidade.colecaoUrl.Remove(Chave);
                    break;
                case Tipos.TipoColecoes.Dividas:
                    this.TmpExcluirAdd(this.CadEntidade.colecaoDividas[Chave]);
                    this.CadEntidade.colecaoDividas.Remove(Chave);
                    break;
            }
        }
        /// <summary>
        /// Exclui todos os Itens da Coleção.
        /// </summary>
        /// <param name="TipoCampo">Qual é o Tipo da Coleção.</param>
        public void ColecaoRemoveTudo(Tipos.TipoColecoes TipoCampo)
        {
            switch (TipoCampo)
            {
                case Tipos.TipoColecoes.Endereco:
                    foreach (object mOb in this.CadEntidade.colecaoEnderecos.Values)
                        this.TmpExcluirAdd(mOb);
                    this.CadEntidade.colecaoEnderecos.Clear();
                    break;
                case Tipos.TipoColecoes.Telefone:
                    foreach (object mOb in this.CadEntidade.colecaoTelefones.Values)
                        this.TmpExcluirAdd(mOb);
                    this.CadEntidade.colecaoTelefones.Clear();
                    break;
                case Tipos.TipoColecoes.Email:
                    foreach (object mOb in this.CadEntidade.colecaoEmail.Values)
                        this.TmpExcluirAdd(mOb);
                    this.CadEntidade.colecaoEmail.Clear();
                    break;
                case Tipos.TipoColecoes.Site:
                    foreach (object mOb in this.CadEntidade.colecaoUrl.Values)
                        this.TmpExcluirAdd(mOb);
                    this.CadEntidade.colecaoUrl.Clear();
                    break;
                case Tipos.TipoColecoes.Dividas:
                    foreach (object mOb in this.CadEntidade.colecaoDividas.Values)
                        this.TmpExcluirAdd(mOb);
                    this.CadEntidade.colecaoDividas.Clear();
                    break;
            }
        }
        /// <summary>
        /// Limpa as coleções conforme os Tipos: Endereco, Telefone, Email, Site  ou Todas.
        /// </summary>
        /// <param name="TipoCampo">
        /// Tipo das coleções que serão Limpadas 
        /// por exemplo: TipoCampo.Endereco, TipoCampo.Telefone, TipoCampo.Email, 
        /// TipoCampo.Site e TipoCampo.Todas(o próprio tipo já diz limpara todas 
        /// de uma só vez).
        /// </param>
        public void ColecaoClear(Tipos.TipoColecoes TipoCampo)
        {
            switch (TipoCampo)
            {
                case Tipos.TipoColecoes.Endereco:
                    this.CadEntidade.colecaoEnderecos.Clear();
                    break;
                case Tipos.TipoColecoes.Telefone:
                    this.CadEntidade.colecaoTelefones.Clear();
                    break;
                case Tipos.TipoColecoes.Email:
                    this.CadEntidade.colecaoEmail.Clear();
                    break;
                case Tipos.TipoColecoes.Site:
                    this.CadEntidade.colecaoUrl.Clear();
                    break;
                case Tipos.TipoColecoes.Dividas:
                    this.CadEntidade.colecaoDividas.Clear();
                    break;
                case Tipos.TipoColecoes.Todos:
                    this.CadEntidade.colecaoEmail.Clear();
                    this.CadEntidade.colecaoTelefones.Clear();
                    this.CadEntidade.colecaoEnderecos.Clear();
                    this.CadEntidade.colecaoUrl.Clear();
                    this.CadEntidade.colecaoDividas.Clear();
                    break;

            }
        }
        /// <summary>
        /// Retorna o Total de Itens existentes na coleção.
        /// </summary>
        /// <param name="TipoCampo">
        /// Tipo da Coleção por exemplo: TipoCampo.Endereco, TipoCampo.Telefone 
        /// TipoCampo.Email ou TipoCampo.Site.
        /// </param>
        /// <returns>
        /// Retorna o Número de Itens Existente na Coleção conforme o 
        /// tipo do Campo, por exemplo: TipoCampo.Endereco, TipoCampo.Telefone 
        /// TipoCampo.Email ou TipoCampo.Site.
        /// </returns>
        public int ColecaoCount(Tipos.TipoColecoes TipoCampo)
        {
            int Count = 0;
            switch (TipoCampo)
            {
                case Tipos.TipoColecoes.Endereco:
                    //Iguala o Total da Coleção na Variável Count que será 
                    //Retornada pela Função.
                    Count = this.CadEntidade.colecaoEnderecos.Count;
                    //Verifica se a Variável Count é Igual 1 e se o Contains do Hastable
                    //Da coleção é vazio.
                    if (Count == 1 && this.CadEntidade.colecaoEnderecos.Contains(""))
                    {
                        //Limpa toda a Coleção e Atribui 0 para a Variável Count.
                        ColecaoClear(TipoCampo);
                        Count = 0;
                    }
                    break;
                case Tipos.TipoColecoes.Telefone:
                    //Segue o mesmo Procedimento do Endereco.
                    Count = this.CadEntidade.colecaoTelefones.Count;
                    if (Count == 1 && this.CadEntidade.colecaoTelefones.Contains(""))
                    {
                        ColecaoClear(TipoCampo);
                        Count = 0;
                    }

                    break;
                case Tipos.TipoColecoes.Email:
                    //Segue o mesmo Procedimento do Endereco.
                    Count = this.CadEntidade.colecaoEmail.Count;
                    if (Count == 1 && this.CadEntidade.colecaoEmail.Contains(""))
                    {
                        ColecaoClear(TipoCampo);
                        Count = 0;
                    }

                    break;

                case Tipos.TipoColecoes.Site:
                    //Segue o mesmo Procedimento do Endereco.
                    Count = this.CadEntidade.colecaoUrl.Count;
                    if (Count == 1 && this.CadEntidade.colecaoUrl.Contains(""))
                    {
                        ColecaoClear(TipoCampo);
                        Count = 0;
                    }

                    break;

                case Tipos.TipoColecoes.Dividas:
                    //Segue o mesmo Procedimento do Endereco.
                    Count = this.CadEntidade.colecaoDividas.Count;
                    if (Count == 1 && this.CadEntidade.colecaoDividas.Contains(""))
                    {
                        ColecaoClear(TipoCampo);
                        Count = 0;
                    }

                    break;

            }
            return Count;
        }
        /// <summary>
        /// Retorna o DataSource das Coleções.
        /// </summary>
        /// <param name="TipoCampo">
        /// Tipo da Coleção por exemplo: TipoCampo.Endereco, TipoCampo.Telefone 
        /// TipoCampo.Email ou TipoCampo.Site.
        /// </param>
        /// <returns>
        /// Retorna o DataSource daColeção conforme o 
        /// tipo do Campo, por exemplo: TipoCampo.Endereco, TipoCampo.Telefone 
        /// TipoCampo.Email ou TipoCampo.Site.
        /// </returns>
        public System.Collections.ICollection ColecaoDataSource(Tipos.TipoColecoes TipoCampo)
        {
            System.Collections.ICollection DataSource = null;
            switch (TipoCampo)
            {
                case Tipos.TipoColecoes.Endereco:
                    DataSource = this.CadEntidade.colecaoEnderecos.Values;
                    break;
                case Tipos.TipoColecoes.Telefone:
                    System.Collections.SortedList slTelefones = new System.Collections.SortedList(this.CadEntidade.colecaoTelefones);
                    if (aSortedLists.ContainsKey(TipoCampo))
                        aSortedLists[TipoCampo] = slTelefones;
                    else
                        aSortedLists.Add(TipoCampo, slTelefones);
                    DataSource = slTelefones.Values;
                    break;
                case Tipos.TipoColecoes.Email:
                    DataSource = this.CadEntidade.colecaoEmail.Values;
                    break;
                case Tipos.TipoColecoes.Site:
                    DataSource = this.CadEntidade.colecaoUrl.Values;
                    break;
                case Tipos.TipoColecoes.Dividas:
                    System.Collections.SortedList slDividas = new System.Collections.SortedList(this.CadEntidade.colecaoDividas);
                    if (aSortedLists.ContainsKey(TipoCampo))
                        aSortedLists[TipoCampo] = slDividas;
                    else
                        aSortedLists.Add(TipoCampo, slDividas);
                    DataSource = slDividas.Values;
                    break;
            }
            return DataSource;
        }
        /// <summary>
        /// Exclui do Banco de Dados uma Entidade(Cliente ou Fornecedor) 
        /// Conforme o Seu ID.
        /// </summary>
        /// <param name="idEntidade">
        /// Número de Identificação da entidade no Banco de Dados.
        /// </param>
        public virtual void Excluir(string idEntidade)
        {
            //Método que busca do banco de dados todas as informações da this.CadEntidade.
            this.CadEntidade.getFieldsFromEntidade(Double.Parse(idEntidade));
            //Exclui do banco de Dados a Entidade(cliente ou fornecedor).
            this.CadEntidade.Excluir(false);
        }
        public virtual void Excluir()
        {
            //Método que busca do banco de dados todas as informações da this.CadEntidade.
            this.CadEntidade.getFieldsFromEntidade(this.aIdExclusao);
            if (this.aParent.TipoEntidade == NBdbm.tipos.TipoEntidade.Clientes)
            {
                string mNomeCarteira = "";
                if (this.CadEntidade.Entidade.PessoaFisica)
                    mNomeCarteira = this.CadEntidade.Entidade.ApelidoNomeFantasia;
                else
                    mNomeCarteira = this.CadEntidade.Entidade.NomeRazaoSocial_key;

                try
                {
                    this.aParent.BusClasses.ExcluirNo("Entidades\\Carteiras\\" + mNomeCarteira);
                    this.aParent.BusClasses.ExcluirNo("Borderos\\" + mNomeCarteira);
                    this.aParent.BusClasses.SalvarArvore();

                    //					this.aNoCarteiras = (NBArvore.No)this.aArvore.Roots.ItemByPath("Entidades\\Carteiras\\" + mNomeCarteira);
                    //					this.aNoCarteiras.Delete();
                    //					this.aNoBorderos = (NBArvore.No)this.aArvore.Roots.ItemByPath("Borderos\\" + mNomeCarteira);
                    //					this.aNoBorderos.Delete();
                    //					this.aArvore.Storage.SalvarArvore();
                }
                catch (Exception ex)
                {
                    throw new NBdbm.EVTexception(ex);
                }
            }

            //Verifica se a entidade pertence a outras classes.
            if (this.aParent.TipoEntidade != NBdbm.tipos.TipoEntidade.Devedores)
                this.CadEntidade.xmPath_LinkEntNo = "<Entidades><" + this.aParent.TipoEntidade.ToString() + ">";
            if (!this.CadEntidade.EstaEmMuitosNos(true))
            {
                //Exclui do banco de Dados a Entidade(cliente ou fornecedor).
                this.CadEntidade.Excluir(false);
            }
        }
        public string ID
        {
            get
            {
                return aID;
            }
        }

        public void NovaEntidade(bool pManterConexaoAberta)
        {
            if (this.aCadEntidade != null)
            {
                this.aCadEntidade.Dispose();
                this.aCadEntidade = null;
            }

            this.aCadEntidade = new NBdbm.Fachadas.plxCOBR.CadastroEntidade(aParent.LimLogin.TipoConexao, (NBdbm.tipos.TipoEntidade)aParent.TipoEntidade, pManterConexaoAberta);

            this.aID = "";
            this.aIDEntidadeDuplicada = "0";
            this.aIdExclusao = 0;
            this.aSource = "Cadastro de " + this.aParent.Legenda.SubTitulo;
            this.aKeyCPF_CNPJ = "";
            this.aKeyNome = "";
            this.aAlteracao = false;
            this.aAlteraDivida = false;
            this.aAlteraEmail = false;
            this.aAlteraEndereco = false;
            this.aAlteraTelefone = false;
            this.aAlteraUrl = false;

            if (this.aParent.TipoEntidade == NBdbm.tipos.TipoEntidade.Devedores)
            {
                //this.aBusAcionamentos = new LimAcionamentos(this.aParent);
                if (this.aParent.Legenda.Titulo != "Acionamentos")
                    this.xmPath_LinkEntNo = this.aParent.BusClasses.XmPathClasseSelecionada;
            }
        }
        public void NovoFone()
        {
            this.CadEntidade.NovoTelefone();
            this.aAlteraTelefone = false;
        }
        public void NovoEndereco()
        {
            this.CadEntidade.NovoEndereco();
            this.aAlteraEndereco = false;
        }
        public void NovoEmail()
        {
            this.CadEntidade.NovoEmail();
            this.aAlteraEmail = false;
        }
        public void NovoSite()
        {
            this.CadEntidade.NovaUrl();
            this.aAlteraUrl = false;
        }
        public void NovaDivida()
        {
            this.CadEntidade.NovaDivida();
            this.CadEntidade.Divida.XmPathCliente = this.xmPath_LinkEntNo;
            this.aAlteraDivida = false;
        }
        public void BaixarDivida(string pKeyDivida)
        {
            this.ColecaoGet(Tipos.TipoColecoes.Dividas, pKeyDivida);

            if (this.Divida.ID == 0)
                throw new NBdbm.COBR_Exception("É Preciso Salvar o Cadastro da Entidade para que possa ser feito uma Baixa da Nova Dívida", this.aSource);

            if (this.Divida.Baixada)
                throw new NBdbm.COBR_Exception("Esta dívida já foi baixada", this.aSource);


        }
        public virtual void LimparDados()
        {
            this.aID = "";
            this.aKeyNome = "";
            this.aIDEntidadeDuplicada = "0";
            this.CadEntidade.Entidade.Clear_vars();
        }
        public string IdEntidadeDuplicada
        {
            get
            {
                return aIDEntidadeDuplicada;
            }
            set
            {
                this.aIDEntidadeDuplicada = value;
            }
        }
        public bool NomeEntidadeJaCadastrada(string NomeEntidade, NBWebControls.MessageBox MsgBox)
        {
            NBdbm.Fachadas.CTR.primitivas.Entidade mEntidade = new NBdbm.Fachadas.CTR.primitivas.Entidade(ref aSelf, this.aParent.LimLogin.TipoConexao, true);
            mEntidade.getFieldsFromNomeEntidade(NomeEntidade);
            if (mEntidade.campos.NomeRazaoSocial_key != "")
            {
                aIDEntidadeDuplicada = mEntidade.campos.ID.ToString();
                MsgBox.ShowConfirma("Já Existe uma entidade cadastrado com esse Nome, deseja visualizar o seu cadastro?", "NomeJaCadastrado", true, true);
                mEntidade.Dispose();
                mEntidade = null;
                return true;
            }
            else
                aIDEntidadeDuplicada = "0";
            return false;

        }
        public bool CPFCNPJJaCadastrado(string CPFCNPJ, NBWebControls.MessageBox MsgBox)
        {
            NBdbm.Fachadas.CTR.primitivas.Entidade mEntidade = new NBdbm.Fachadas.CTR.primitivas.Entidade(ref aSelf, this.aParent.LimLogin.TipoConexao, true);
            mEntidade.getFieldsFromCnpjCpf(CPFCNPJ);
            if (mEntidade.campos.CPFCNPJ_key != "")
            {
                string TipoEntidade = this.aParent.TipoEntidade.ToString();
                if (mEntidade.VariosCPFCNPJ)
                {
                    MsgBox.Show("Existem mais de um " + TipoEntidade.Remove(TipoEntidade.Length - 1, 1) + " cadastrado com esse CPF/CNPJ, se deseja visualizar Cancele esta Operação e faça uma pesquisa por CPF/CNPJ");
                }
                else
                {
                    MsgBox.ShowConfirma("Já Existe um " + TipoEntidade.Remove(TipoEntidade.Length - 1, 1) + " cadastrado com esse CPF/CNPJ, deseja visualizar o seu cadastro?", "CPFJaCadastrado", true, true);
                }
                aIDEntidadeDuplicada = mEntidade.campos.ID.ToString();
                mEntidade.Dispose();
                mEntidade = null;
                return true;
            }
            else
                aIDEntidadeDuplicada = "0";
            return false;

        }
        public bool ChaveDuplicada(string NomeEntidade, string CPFCNPJ)
        {
            bool Retorno = false;
            NBdbm.Fachadas.CTR.primitivas.Entidade mEntidade = new NBdbm.Fachadas.CTR.primitivas.Entidade(ref aSelf, this.aParent.LimLogin.TipoConexao, true);
            mEntidade.getFieldsFromNomeEntidade(NomeEntidade);
            string mUserCadastrado = mEntidade.campos.NomeRazaoSocial_key.Trim();
            string mCPFCNPJCadastrado = mEntidade.campos.CPFCNPJ_key.Trim();
            string mCPFCNPJLimpo = CPFCNPJ.Replace(".", "");
            mCPFCNPJLimpo = mCPFCNPJLimpo.Replace("-", "");
            if (mUserCadastrado == NomeEntidade.Trim() && mCPFCNPJCadastrado == mCPFCNPJLimpo.Trim())
                Retorno = true;
            mEntidade.Dispose();
            mEntidade = null;
            return Retorno;
        }
        public Tipos.TipoPesquisa TipoPesqAtual
        {
            get
            {
                return this.aTipoPesqAtual;
            }
            set
            {
                this.aTipoPesqAtual = value;
            }
        }
        public Tipos.TipoPessoa TipoPessoaAtual
        {
            get
            {
                return this.aTipoPessoaAtual;
            }
            set
            {
                this.aTipoPessoaAtual = value;
            }
        }
        //		public LimAcionamentos Acionamentos
        //		{
        //			get
        //			{
        //				return this.aBusAcionamentos;
        //			}
        //		}
        public System.Collections.ICollection DataSourceAcionamentos
        {
            get
            {
                System.Collections.SortedList mSL = new System.Collections.SortedList(this.CadEntidade.colecaoAcionamentos);
                return mSL.Values;
            }
        }
        public string ValorPesquisa
        {
            get
            {
                return this.aValorPesquisa;
            }
            set
            {
                this.aValorPesquisa = value;
            }
        }
        public double IdExcluir
        {
            get
            {
                return this.aIdExclusao;
            }
            set
            {
                this.aIdExclusao = value;
            }
        }

        public bool Alteracao
        {
            get
            {
                return this.aAlteracao;
            }
        }
        public bool AlteraDivida
        {
            get
            {
                return this.aAlteraDivida;
            }
        }
        public string ExceptionSource
        {
            get
            {
                return "**** Cadastro de " + aParent.TipoEntidade.ToString() + " ****";
            }
        }
        public string xmPath_LinkEntNo
        {
            get
            {
                return this.CadEntidade.xmPath_LinkEntNo;
            }
            set
            {
                this.aXmPathAtual = value;
                this.CadEntidade.xmPath_LinkEntNo = value;
            }
        }
        public string ChaveTmp
        {
            get
            {
                return this.aChaveTmp;
            }
            set
            {
                this.aChaveTmp = value;
            }
        }
        public string CampoRecebeFoco
        {
            get
            {
                return this.aCampoRecebeFoco;
            }
            set
            {
                this.aCampoRecebeFoco = value;
            }
        }
        public System.Data.DataView TipoDividaDataSource
        {
            get
            {
                string mSqlTipoDivida = "SELECT * FROM COBR_TipoDivida";
                this.aDataSourceTipoDivida = NBFuncoes.DataView(mSqlTipoDivida, this.aParent.Connection);
                return this.aDataSourceTipoDivida;
            }
        }
        public string GetDescricaoTipoDivida(int id)
        {
            string mSelect = "id = " + id.ToString();
            System.Data.DataRow mDR = this.aDataSourceTipoDivida.Table.Select(mSelect)[0];
            return (string)mDR[1];
        }
        public string GetDescricaoCarteira(string pXmPathCliente)
        {
            string mCarteira = pXmPathCliente.Remove(0, 23);
            mCarteira = mCarteira.Replace(">", "");
            return mCarteira;
        }
        public relatorio Relatorio
        {
            get
            {
                if (this.aRelatorio == null)
                    this.aRelatorio = new relatorio(this);
                return this.aRelatorio;
            }
        }
        private void TmpExcluirAdd(object excluirOque)
        {
            switch (excluirOque.GetType().FullName)
            {
                case "NBdbm.Fachadas.CTR.primitivas.Endereco+EnderecoCampos":
                    NBdbm.Fachadas.CTR.primitivas.Endereco mEnde = new NBdbm.Fachadas.CTR.primitivas.Endereco(ref aSelf, this.aParent.LimLogin.TipoConexao, false);
                    mEnde.Campos = (NBdbm.Interfaces.iCTR.Primitivas.iEndereco)excluirOque;

                    if (mEnde.Campos.ID > 0)
                    {
                        mEnde.Clear_filters();
                        mEnde.filterWhere = "idEndereco = " + mEnde.Campos.ID.ToString();
                        this.aTmpObjExcluir.Add(mEnde.Campos.Key, mEnde);
                    }
                    break;

                case "NBdbm.Fachadas.CTR.primitivas.Telefone+TelefoneCampos":
                    NBdbm.Fachadas.CTR.primitivas.Telefone mFone = new NBdbm.Fachadas.CTR.primitivas.Telefone(ref aSelf, this.aParent.LimLogin.TipoConexao, false);
                    mFone.Campos = (NBdbm.Interfaces.iCTR.Primitivas.iTelefone)excluirOque;

                    if (mFone.Campos.ID > 0)
                    {
                        mFone.Clear_filters();
                        mFone.filterWhere = "idFone = " + mFone.Campos.ID.ToString();
                        this.aTmpObjExcluir.Add(mFone.Campos.Key, mFone);
                    }
                    break;

                case "NBdbm.Fachadas.CTR.primitivas.eMail+EmailCampos":
                    NBdbm.Fachadas.CTR.primitivas.eMail mEmail = new NBdbm.Fachadas.CTR.primitivas.eMail(ref aSelf, this.aParent.LimLogin.TipoConexao, false);
                    mEmail.Campos = (NBdbm.Interfaces.iCTR.Primitivas.iEmail)excluirOque;

                    if (mEmail.Campos.ID > 0)
                    {
                        mEmail.Clear_filters();
                        mEmail.filterWhere = "idEmail = " + mEmail.Campos.ID.ToString();
                        this.aTmpObjExcluir.Add(mEmail.Campos.Key, mEmail);
                    }
                    break;

                case "NBdbm.Fachadas.CTR.primitivas.Url+UrlCampos":
                    NBdbm.Fachadas.CTR.primitivas.Url mUrl = new NBdbm.Fachadas.CTR.primitivas.Url(ref aSelf, this.aParent.LimLogin.TipoConexao, false);
                    mUrl.Campos = (NBdbm.Interfaces.iCTR.Primitivas.iUrl)excluirOque;

                    if (mUrl.Campos.ID > 0)
                    {
                        mUrl.Clear_filters();
                        mUrl.filterWhere = "idUrl = " + mUrl.Campos.ID.ToString();
                        this.aTmpObjExcluir.Add(mUrl.Campos.Key, mUrl);
                    }
                    break;

                case "NBdbm.Fachadas.plxCOBR.primitivas.Divida+DividaCampos":
                    NBdbm.Fachadas.plxCOBR.primitivas.Divida mDivida = new NBdbm.Fachadas.plxCOBR.primitivas.Divida(ref aSelf, this.aParent.LimLogin.TipoConexao, false);
                    mDivida.Campos = (NBdbm.Interfaces.iCOBR.Primitivas.iDivida)excluirOque;

                    if (mDivida.Campos.ID > 0)
                    {
                        mDivida.Clear_filters();
                        mDivida.filterWhere = "id = " + mDivida.Campos.ID.ToString();
                        this.aTmpObjExcluir.Add(mDivida.Campos.Key, mDivida);
                    }
                    break;
            }

        }
        public void EditarCadastro(NBdbm.Fachadas.plxCOBR.CadastroEntidade pCadEntidade)
        {
            aCadEntidade = pCadEntidade;
        }
        public class relatorio
        {
            private string aFiltroCarteira = "";
            private string aNomeCarteira = "";
            private string aFiltroTipoDivida = "";
            private StringBuilder aFiltroPeriodo = null;
            private double aValorTotalNominal = 0;
            private bool aAgruparDividas = false;

            private LimEntidades aParent;

            public relatorio(LimEntidades pParent)
            {
                this.aParent = pParent;
            }
            public void CriarFiltros(string pCarteira, int pTipoDivida, bool pAgruparDividas, DateTime? pDataInicial, DateTime? pDataFinal)
            {
                //Cria o Filtro para Carteiras
                this.aNomeCarteira = pCarteira;
                if (pCarteira != "Todas")
                    this.aFiltroCarteira = string.Format("AND div.XmPathCliente = N'<Entidades><Carteiras><{0}>'", pCarteira);
                else
                    this.aFiltroCarteira = string.Empty;

                //Cria o Filtro para Tipo de Dívida
                if (pTipoDivida > 0)
                    this.aFiltroTipoDivida = string.Format("AND div.IdTipoDivida = {0}", pTipoDivida);
                else
                    this.aFiltroTipoDivida = string.Empty;

                //Cria o Filtro de período
                if (pDataInicial != null && pDataFinal != null)
                {
                    aFiltroPeriodo = new StringBuilder();
                    aFiltroPeriodo.AppendFormat("AND div.DataVencimento >= {0}\r\n", NBFuncoes.FormatCampoToSQL(pDataInicial.Value));
                    aFiltroPeriodo.AppendFormat("AND div.DataVencimento <= {0}\r\n", NBFuncoes.FormatCampoToSQL(pDataFinal.Value));
                }
                else
                    aFiltroPeriodo = null;

                this.aAgruparDividas = pAgruparDividas;

            }
            public System.Data.DataView DataSourceDevedores
            {
                get
                {
                    System.Data.DataSet mDT = NBFuncoes.DataSet(this.SqlDevedores, this.aParent.aParent.Connection);
                    this.aValorTotalNominal = Convert.ToDouble(mDT.Tables[1].Rows[0][0]);
                    return mDT.Tables[0].DefaultView;
                }
            }
            public string GetNomeCarteira(string pXmPathCliente)
            {
                string mNomeCarteira = pXmPathCliente.Replace("<Entidades><Carteiras><", "");
                mNomeCarteira = mNomeCarteira.Replace(">", "");
                return mNomeCarteira.ToUpper();
            }
            public double ValorTotalNominal
            {
                get
                {
                    return this.aValorTotalNominal;
                }
            }
            public string FiltroCarteira
            {
                get
                {
                    return this.aNomeCarteira;
                }
            }
            public bool AgruparDividas
            {
                get { return aAgruparDividas; }
            }
            private string SqlDevedores
            {
                get
                {
                    StringBuilder mSqlTotal = new StringBuilder();
                    StringBuilder mSqlPesqDevedores = new StringBuilder();
                    StringBuilder mFiltros = new StringBuilder("WHERE div.Baixada = 0\r\n");

                    if (!string.IsNullOrEmpty(aFiltroCarteira))
                        mFiltros.AppendLine(aFiltroCarteira);
                    if (!string.IsNullOrEmpty(aFiltroTipoDivida))
                        mFiltros.AppendLine(aFiltroTipoDivida);
                    if (aFiltroPeriodo != null)
                        mFiltros.Append(aFiltroPeriodo);

                    mSqlTotal.AppendLine("SELECT isnull((Sum(div.ValorNominal) - ISNULL(SUM(baixa.ValorBaixa),0)),0) ValorTotal");
                    mSqlTotal.AppendLine("FROM COBR_Divida div");
                    mSqlTotal.AppendLine("left join (select IdDivida, SUM(ValorBaixa) ValorBaixa");
                    mSqlTotal.AppendLine("		from COBR_Baixas");
                    mSqlTotal.AppendLine("		group by IdDivida) baixa on baixa.IdDivida = div.Id");
                    mSqlTotal.Append(mFiltros);

                    if (aAgruparDividas)
                    {
                        mSqlPesqDevedores.AppendLine("SELECT ent.idEntidade, XmPathCliente, NomePrimary, (Sum(div.ValorNominal) - ISNULL(SUM(baixa.ValorBaixa),0)) ValorNominalTotal");
                    }
                    else
                    {
                        mSqlPesqDevedores.AppendLine("SELECT ent.idEntidade, XmPathCliente, NomePrimary, tpdiv.Descricao DescTipoDivida, Contrato, NumDoc, ");
                        mSqlPesqDevedores.AppendLine("DataVencimento, (Sum(div.ValorNominal) - ISNULL(SUM(baixa.ValorBaixa),0)) ValorNominal");
                    }

                    mSqlPesqDevedores.AppendLine("FROM CTRL_Entidades ent");
                    mSqlPesqDevedores.AppendLine("join COBR_Divida div on div.IdEntidade = ent.IdEntidade");
                    mSqlPesqDevedores.AppendLine("join COBR_TipoDivida tpdiv  on tpdiv.Id = div.IdTipoDivida");
                    mSqlPesqDevedores.AppendLine("left join (select IdDivida, SUM(ValorBaixa) ValorBaixa");
                    mSqlPesqDevedores.AppendLine("		from COBR_Baixas");
                    mSqlPesqDevedores.AppendLine("		group by IdDivida) baixa on baixa.IdDivida = div.Id");
                    mSqlPesqDevedores.Append(mFiltros);

                    if (aAgruparDividas)
                    {
                        mSqlPesqDevedores.AppendLine("group by NomePrimary, XmPathCliente, ent.idEntidade");

                        if (aNomeCarteira != "Todas")
                            mSqlPesqDevedores.AppendLine("Order by NomePrimary");
                        else
                            mSqlPesqDevedores.AppendLine("Order by XmPathCliente, NomePrimary");
                    }
                    else
                    {
                        mSqlPesqDevedores.AppendLine("Group by XmPathCliente, NomePrimary, tpdiv.Descricao, Contrato, NumDoc, DataVencimento, ent.idEntidade");
                        if (aNomeCarteira != "Todas")
                            mSqlPesqDevedores.AppendLine("Order by NomePrimary, Descricao, NumDoc");
                        else
                            mSqlPesqDevedores.AppendLine("Order by XmPathCliente, NomePrimary, Descricao, NumDoc");
                    }

                    mSqlPesqDevedores.AppendLine("\r\n--- SQL para trazer o valor nominal total dos devedores ---\r\n");
                    mSqlPesqDevedores.Append(mSqlTotal);

                    return mSqlPesqDevedores.ToString();
                }
            }
        }
        #region IDisposable Members
        public void Dispose()
        {
            this.aParent = null;
            aRelatorio = null;
            aSelf = null;

            if (this.aCadEntidade != null)
                this.aCadEntidade.Dispose();
            this.aCadEntidade = null;

            if (aDataSourceTipoDivida != null)
                aDataSourceTipoDivida.Dispose();
            aDataSourceTipoDivida = null;

            aTmpObjExcluir.Clear();
            aTmpObjExcluir = null;

            aSortedLists.Clear();
            aSortedLists = null;

        }

        #endregion
    }//end LimEntidades

}//end namespace Classes