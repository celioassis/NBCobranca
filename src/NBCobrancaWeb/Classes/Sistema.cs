///////////////////////////////////////////////////////////
//  Sistema.cs
//  Implementation of the Class Sistema
//  Generated by Enterprise Architect
//  Created on:      22-fev-2005 17:03:04
///////////////////////////////////////////////////////////

using System;
using System.Collections;
using NBCobranca.Tipos;
using System.Collections.Generic;
using System.Reflection;

namespace NBCobranca.Classes
{
    /// <summary>
    /// Classe Principal do Controle de Eventos.
    /// </summary>
    public class Sistema : IDisposable
    {
        private LimFuncionarios aLimFuncionarios;
        private LimEntidades aLimEntidades;
        private LimLogin aLimLogin;
        private LimTipoDivida aLimTipoDivida;
        private LimTipoAcionamentos aLimTipoAcionamentos;
        private LimAcionamentos aLimAcionamentos;
        private LimBaixa aLimBaixa;
        private BusClasses aBusClasses;
        private BusBordero aBusBordero;
        private BusEntidade aBusEntidade;
        private BusAcionamentos aBusAcionamentos;
        private BusBaixas aBusBaixas;
        private BusDividas aBusDividas;
        private BusTiposDivida aBusTiposDivida;
        private BusAlertas aBusAlertas;
        private BusSMS aBusSMS;
        private BusDistribuirFichas aBusDistribuirFichas;
        private BusFuncionarios aBusFuncionarios;
        private NBdbm.tipos.TipoEntidade aTipoEntidade = NBdbm.tipos.TipoEntidade.Funcionários;
        private System.Web.UI.Page aPagina;
        private clLegenda aLegenda = new clLegenda();
        private System.Data.IDbConnection aConnection;
        private string aConnString = "";
        private Neobridge.NBDB.DBDirect aDB;
        private NBdbm.self aSelf;
        private BusTiposAcionamento _busTiposAcionamento;
        private Dictionary<string,BusBase> _listaBussines;
        public Sistema()
        {
            this.aSelf = new NBdbm.self();
            this.aDB = new Neobridge.NBDB.DBDirect("ConnString");
            _listaBussines = new Dictionary<string, BusBase>();
        }


        public T  GetInstance<T>() where T: BusBase
        {
            Type mClasse = typeof(T);

            if (_listaBussines.ContainsKey(mClasse.FullName))
            { return _listaBussines[mClasse.FullName] as T; }
            else
            {
                var mClass = Assembly.GetAssembly(mClasse);

                object[] mParam;
                { mParam = new object[2]; }

                mParam[0] = this;
                mParam[1] = aDB;

                T mNg = (T)mClass.CreateInstance(mClasse.FullName, true, BindingFlags.CreateInstance, null, mParam, null, null);
                _listaBussines.Add(mClasse.FullName, mNg);
                return mNg;
            }
        }

        /// <summary>
        /// Retorna o Limite de Funcionários
        /// </summary>
        public LimFuncionarios LimFuncionarios
        {
            get
            {
                //Caso este objeto seja nulo do mesmo será criada uma nova
                //instancia.
                if (aLimFuncionarios == null)
                {
                    aLimFuncionarios = new LimFuncionarios(this);
                }
                return aLimFuncionarios;
            }
        }
        /// <summary>
        /// Retorna um Limite de Entidades.
        /// </summary>
        public LimEntidades LimEntidades
        {
            get
            {
                //Caso este objeto seja nulo do mesmo será criada uma nova
                //instancia.
                if (aLimEntidades == null)
                    aLimEntidades = new LimEntidades(this);
                return aLimEntidades;
            }
        }

        /// <summary>
        /// Retorna o Limite de Login
        /// </summary>
        public LimLogin LimLogin
        {
            get
            {
                if (aLimLogin == null)
                    aLimLogin = new LimLogin();
                return aLimLogin;
            }
        }

        /// <summary>
        /// Retorna o Limite do Tipo de Dívida.
        /// </summary>
        public LimTipoDivida LimTipoDivida
        {
            get
            {
                if (this.aLimTipoDivida == null)
                    this.aLimTipoDivida = new LimTipoDivida(this);
                return this.aLimTipoDivida;
            }
        }
        public LimTipoAcionamentos LimTipoAcionamento
        {
            get
            {
                if (this.aLimTipoAcionamentos == null)
                    this.aLimTipoAcionamentos = new LimTipoAcionamentos(this);
                return this.aLimTipoAcionamentos;
            }
        }
        public LimAcionamentos LimAcionamentos
        {
            get
            {
                try
                {
                    bool mIsNull = (this.aLimAcionamentos.FichaDevedor.Entidade == null);
                }
                catch (NullReferenceException)
                {
                    this.aLimAcionamentos = new LimAcionamentos(this);
                }
                return this.aLimAcionamentos;
            }
        }
        public LimBaixa LimBaixa
        {
            get
            {
                if (this.aLimBaixa == null)
                    this.aLimBaixa = new LimBaixa(this);
                return this.aLimBaixa;
            }
        }
        public BusClasses BusClasses
        {
            get
            {
                if (this.aBusClasses == null)
                    this.aBusClasses = new BusClasses(this);
                return this.aBusClasses;
            }
        }
        public BusBordero BusBordero
        {
            get
            {
                if (this.aBusBordero == null)
                    this.aBusBordero = new BusBordero(this);
                return this.aBusBordero;
            }
        }
        public System.Web.UI.Page PaginaWeb
        {
            set
            {
                this.aPagina = value;
            }
        }
        public void ValidaCredencial(Permissao permite)
        {
            bool mValido;
            switch (permite)
            {
                case Permissao.Administrador:
                    if (this.aLimLogin.Credencial == TipoCredencial.Administrador)
                        mValido = true;
                    else
                        mValido = false;
                    break;
                case Permissao.Padrao:
                    switch (aLimLogin.Credencial)
                    {
                        case TipoCredencial.Acionador:
                            mValido = false;
                            break;
                        default:
                            mValido = true;
                            break;
                    }
                    break;
                default:
                    mValido = true;
                    break;
            }
            if (!mValido)
            {
                this.aLegenda.Titulo = "Erro de Credencial";
                this.aPagina.Response.Redirect("credencial_erro.aspx");
            }
        }

        public void ValidaCredencial()
        {
            this.ValidaCredencial(Permissao.Padrao);
        }
        public NBdbm.tipos.TipoEntidade TipoEntidade
        {
            set
            {
                aTipoEntidade = value;
            }
            get
            {
                return aTipoEntidade;
            }
        }
        public System.Data.IDbConnection Connection
        {
            get
            {
                if (this.aConnection == null)
                {
                    this.aConnection = NBFuncoes.Conexao(aSelf, this.LimLogin.TipoConexao);
                    this.aConnString = this.aConnection.ConnectionString;
                }
                if (this.aConnection.ConnectionString == "")
                    this.aConnection.ConnectionString = this.aConnString;

                return this.aConnection;
            }
            set
            {
                this.aConnection = value;
            }
        }
        public clLegenda Legenda
        {
            get
            {
                return aLegenda;
            }
        }
        public class clLegenda : IDisposable
        {
            private string aTitulo = "Login";
            private string aSubTitulo = "";

            public string Titulo
            {
                get
                {
                    return aTitulo;
                }
                set
                {
                    aTitulo = value;
                }
            }
            public string SubTitulo
            {
                get
                {
                    return aSubTitulo;
                }
                set
                {
                    aSubTitulo = value;
                }
            }
            #region IDisposable Members

            public void Dispose()
            {
                aTitulo = null;
                aSubTitulo = null;
            }

            #endregion
        }
        public BusEntidade busEntidade
        {
            get
            {
                if (this.aBusEntidade == null)
                    this.aBusEntidade = new BusEntidade(this, this.aDB);
                return this.aBusEntidade;
            }
        }
        public BusAcionamentos busAcionamentos
        {
            get
            {
                if (this.aBusAcionamentos == null)
                    this.aBusAcionamentos = new BusAcionamentos(this, this.aDB);
                return this.aBusAcionamentos;
            }
        }
        public BusBaixas busBaixas
        {
            get
            {
                if (this.aBusBaixas == null)
                    this.aBusBaixas = new BusBaixas(this, this.aDB);
                return this.aBusBaixas;
            }
        }
        public BusDividas busDividas
        {
            get
            {
                if (this.aBusDividas == null)
                    this.aBusDividas = new BusDividas(this, this.aDB);
                return this.aBusDividas;
            }
        }
        public BusTiposDivida busTiposDivida
        {
            get
            {
                if (this.aBusTiposDivida == null)
                    this.aBusTiposDivida = new BusTiposDivida(this, this.aDB);
                return this.aBusTiposDivida;
            }
        }
        public BusAlertas busAlertas
        {
            get
            {
                if (this.aBusAlertas == null)
                    this.aBusAlertas = new BusAlertas(this, aDB);
                return aBusAlertas;
            }
        }

        public BusSMS busSMS
        {
            get
            {
                if (this.aBusSMS == null)
                    this.aBusSMS = new BusSMS(this, aDB);
                return this.aBusSMS;
            }
        }

        public BusDistribuirFichas busDistribuirFichas
        {
            get {
                if (this.aBusDistribuirFichas == null)
                    this.aBusDistribuirFichas = new BusDistribuirFichas(this, aDB);
                return this.aBusDistribuirFichas;
            }
        }
        public BusFuncionarios busFuncionarios
        {
            get {
                if (this.aBusFuncionarios == null)
                    this.aBusFuncionarios = new BusFuncionarios(this, aDB);
                return this.aBusFuncionarios;
            }
        }

        public BusTiposAcionamento busTiposAcionamento
        {
            get
            {
                if (_busTiposAcionamento == null)
                    _busTiposAcionamento = new BusTiposAcionamento(this,aDB);
                return _busTiposAcionamento;
            }
        }

        public NBdbm.self Self
        {
            get { return aSelf; }
        }
        public void Dispose()
        {
            if (aLimTipoDivida != null)
                aLimTipoDivida.Dispose();
            aLimTipoDivida = null;

            if (aLimTipoAcionamentos != null)
                aLimTipoAcionamentos = null;

            if (aLimAcionamentos != null)
                aLimAcionamentos.Dispose();
            aLimAcionamentos = null;

            if (aLimBaixa != null)
                aLimBaixa.Dispose();
            aLimBaixa = null;

            if (aBusClasses != null)
                aBusClasses.Dispose();
            aBusClasses = null;

            if (aBusBordero != null)
                aBusBordero.Dispose();
            aBusBordero = null;

            if (aBusEntidade != null)
                aBusEntidade.Dispose();
            aBusEntidade = null;

            if (aBusAcionamentos != null)
                aBusAcionamentos.Dispose();
            aBusAcionamentos = null;

            if (aBusBaixas != null)
                aBusBaixas.Dispose();
            aBusBaixas = null;

            if (aBusDividas != null)
                aBusDividas.Dispose();
            aBusDividas = null;

            if (aBusTiposDivida != null)
                aBusTiposDivida.Dispose();
            aBusTiposDivida = null;

            if (aBusAlertas != null)
                aBusAlertas.Dispose();
            aBusAlertas = null;

            if (aLimFuncionarios != null)
                aLimFuncionarios.Dispose();
            aLimFuncionarios = null;

            if (aLimEntidades != null)
                aLimEntidades.Dispose();
            aLimEntidades = null;

            if (aLimLogin != null)
                aLimLogin.Dispose();
            aLimLogin = null;
            aLegenda.Dispose();

            if (aBusSMS != null)
                aBusSMS.Dispose();
            aBusSMS = null;

            if (this.aConnection != null)
            {
                this.aConnection.Dispose();
                this.aConnection = null;
            }
        }

    }//end Sistema

}//end namespace Classes