///////////////////////////////////////////////////////////
//  LimEntidades.cs
//  Implementation of the Class LimEntidades
//  Generated by Enterprise Architect
//  Created on:      22-fev-2005 17:03:03
///////////////////////////////////////////////////////////




using System;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using NBCobranca.Tipos;

namespace NBCobranca.Classes
{
    public class LimFuncionarios : IDisposable
    {
        private NBdbm.Fachadas.CTR.CadastroFuncionario aFuncionario;
        private Tipos.TipoPesquisa aTipoPesqAtual;
        private bool aisAlteracao = false;
        private Sistema aParent;
        private string aIDEntidadeDuplicada = "";
        private string aIDConsultado = "";
        private string aKeyNomeConsultado = "";
        private string aKeyEnderecoConsultado = "";
        private string aKeyEmailConsultado = "";
        private System.Collections.ArrayList aKeyFoneConsultado = new System.Collections.ArrayList(2);
        private System.Collections.ArrayList aKeyCelularConsultado = new System.Collections.ArrayList(2);
        private int aidExcluir;
        private bool aAtivar = false;
        private NBdbm.self aSelf;

        /// <summary>
        /// Metodo Construtor do LimFuncionários.
        /// </summary>
        public LimFuncionarios(Sistema pParent)
        {
            this.aParent = pParent;
            this.aSelf = pParent.Self;
        }

        public void NovoFuncionario()
        {
            if (aFuncionario != null)
            {
                aFuncionario.Dispose();
                aFuncionario = null;
            }
            aIDEntidadeDuplicada = "";
            aIDConsultado = "";
            aKeyNomeConsultado = "";
            aKeyEnderecoConsultado = "";
            aKeyEmailConsultado = "";
            aKeyFoneConsultado = new System.Collections.ArrayList(2);
            aKeyCelularConsultado = new System.Collections.ArrayList(2);
            aidExcluir = 0;
            aAtivar = false;
            aisAlteracao = false;

            //Referencia a Entidade com o Funcionário, para que as funcionalidades 
            //da entidade se reflitam no Funcioário.
            this.aFuncionario = new NBdbm.Fachadas.CTR.CadastroFuncionario(this.aParent.LimLogin.TipoConexao);

        }

        public NBdbm.Interfaces.iCTR.Primitivas.iEntidade Entidade
        {
            get
            {
                return this.aFuncionario.Entidade;
            }
        }


        public NBdbm.Interfaces.iCTR.Primitivas.iEndereco Endereco
        {
            get
            {
                return this.aFuncionario.Endereco;
            }
        }


        public NBdbm.Interfaces.iCTR.Primitivas.iEmail Email
        {
            get
            {
                return this.aFuncionario.Email;
            }
        }


        public NBdbm.Interfaces.iCTR.Primitivas.iTelefone Telefone
        {
            get
            {
                return this.aFuncionario.Telefone;
            }
        }
        /// <summary>
        /// Propriedade que Retorna o objeto Celular.
        /// </summary>
        public NBdbm.Interfaces.iCTR.Primitivas.iTelefone Celular
        {
            get
            {
                return this.aFuncionario.Celular;
            }
        }

        /// <summary>
        /// Propriedade que contem particulariedades do Funcionário como 
        /// Login e Senha.
        /// </summary>
        public NBdbm.Interfaces.iCTR.Primitivas.iUsuario Usuario
        {
            get
            {
                return aFuncionario.Usuario;
            }
        }
        /// <summary>
        /// Propriedade que contem Configurações do Funcionário.
        /// </summary>
        public NBdbm.Interfaces.iCTR.Primitivas.iUsuarioConfig UsuarioConfig
        {
            get
            {
                return aFuncionario.UsuarioConfig;
            }
        }

        /// <summary>
        /// Metodo para Salvar os Dados do Funcionário no Banco de Dados.
        /// </summary>
        public void Salvar()
        {
            try
            {
                if (!this.aisAlteracao)
                {
                    if (this.IdEntidadeDuplicada != "0")
                        if (this.ChaveDuplicada())
                            throw new Exception("Já Existe uma Entidade Cadastrada com esse Nome e CPF.");
                }
                if (this.UsuarioJaCadastrado())
                    throw new Exception("Nome de Usuário já esta em uso por outro Funcionário, favor modificar.");

                if (this.aisAlteracao)
                {
                    this.VerificaMudancaChave();

                    this.VerificaEndereco();

                    this.VerificaTelefone();

                    this.VerificaCelular();

                    this.VerificaEmail();

                }

                aFuncionario.Salvar(false);
            }
            catch (NBdbm.NBexception nbEx)
            {
                throw new NBdbm.EVTexception(nbEx);
            }
            catch (Exception ex)
            {
                throw new NBdbm.EVTexception(ex.Message, this.Source);
            }

        }
        /// <summary>
        /// Consulta de Funcionários conforme o seu número de Identificação.
        /// </summary>
        /// <param name="idFuncionario">
        /// Número de Identificação (idEntidade ou ID)
        /// </param>
        public void Consulta(string idFuncionario)
        {
            if (aFuncionario == null)
                NovoFuncionario();
            //Executa o metodo getFieldsFromEntidade, o qual ira popular todos 
            //os objetos da entidade Funcionário, como Dados Pessoais, Endereço, etc...
            aFuncionario.getFieldsFromEntidade(Double.Parse(idFuncionario));
            //Popula a variável ID com o ID da entidade Funcionário.
            if (aFuncionario.Entidade.ID > 0)
            {
                this.aIDConsultado = this.aFuncionario.Entidade.ID.ToString();

                this.aKeyNomeConsultado = this.aFuncionario.Entidade.NomeRazaoSocial_key;

                this.aKeyEnderecoConsultado = this.aFuncionario.Endereco.Logradouro_key;

                this.aKeyEmailConsultado = this.aFuncionario.Email.eMail_key;

                this.aKeyFoneConsultado.Add(this.aFuncionario.Telefone.DDD_key);
                this.aKeyFoneConsultado.Add(this.aFuncionario.Telefone.Fone_key);

                this.aKeyCelularConsultado.Add(this.aFuncionario.Celular.DDD_key);
                this.aKeyCelularConsultado.Add(this.aFuncionario.Celular.Fone_key);

                this.aisAlteracao = true;
            }
        }
        //		/// <summary>
        //		/// Limpa todos os Objetos de funcionários
        //		/// </summary>
        //		public void LimparDados()
        //		{
        //			this.aFuncionario.LimpaVars();
        //		}
        //

        public bool isAlteracao
        {
            get
            {
                return this.aisAlteracao;
            }
        }


        /// <summary>
        /// Exclusão de Funcionário.
        /// </summary>
        /// <param name="idEntidade">
        /// Número de Identificação do Funcionário no Banco de Dados.
        /// </param>
        public void AtivaDesativa()
        {
            //Executa o metodo getFieldsFromEntidade, o qual ira popular todos 
            //os objetos da entidade Funcionário, como Dados Pessoais, Endereço, etc...
            aFuncionario.getFieldsFromEntidade(this.aidExcluir);
            //Desativa Funcioário
            aFuncionario.UsuarioConfig.AtivaDesativa(!this.aAtivar);
        }


        public System.Data.DataView DataSource(string valor)
        {
            return this.DataSource(this.WherePesq(this.aTipoPesqAtual, valor));
        }


        public TipoPesquisa TipoPesqAtual
        {
            get
            {
                return this.aTipoPesqAtual;
            }
            set
            {
                this.aTipoPesqAtual = value;
            }
        }


        public string Source
        {
            get
            {
                return this.aFuncionario.Source;
            }
        }


        public string IdEntidadeDuplicada
        {
            get
            {
                return this.aIDEntidadeDuplicada;
            }
            set
            {
                this.aIDEntidadeDuplicada = value;
            }
        }


        public int IdExcluir
        {
            get
            {
                return this.aidExcluir;
            }
            set
            {
                this.aidExcluir = value;
            }
        }


        public bool NomeEntidadeJaCadastrada(string NomeEntidade, NBWebControls.MessageBox MsgBox)
        {
            NBdbm.Fachadas.CTR.primitivas.Entidade mEntidade = new NBdbm.Fachadas.CTR.primitivas.Entidade(ref aSelf, this.aParent.LimLogin.TipoConexao, true);
            mEntidade.getFieldsFromNomeEntidade(NomeEntidade);
            if (mEntidade.campos.NomeRazaoSocial_key != "")
            {
                aIDEntidadeDuplicada = mEntidade.campos.ID.ToString();
                MsgBox.ShowConfirma("Já Existe uma entidade cadastrado com esse Nome, deseja visualizar o seu cadastro?", "NomeJaCadastrado", true, true);
                mEntidade.Dispose();
                mEntidade = null;
                return true;
            }
            else
                aIDEntidadeDuplicada = "0";
            return false;

        }


        public bool FuncionarioAtivo
        {
            get
            {
                return this.aAtivar;
            }
            set
            {
                this.aAtivar = value;
            }
        }


        public void Dispose()
        {
            if (aFuncionario != null)
                this.aFuncionario.Dispose();
            this.aFuncionario = null;

            this.aParent = null;
            this.aSelf = null;
            aKeyFoneConsultado.Clear();
            aKeyFoneConsultado = null;
            aKeyCelularConsultado.Clear();
            aKeyCelularConsultado = null;

        }


        private System.Data.DataView DataSource(System.Text.StringBuilder SqlWhere)
        {
            //			SQL que Retorna todas os Registros de uma entidade, como por ex: 
            //			Todos os Clientes, Fornecedores ou Funcionários, conforme o parametro 
            //			sqlWhere.

            System.Text.StringBuilder strSQL = new System.Text.StringBuilder();
            strSQL.AppendLine("SELECT CTRL_Entidades.IdEntidade, CTRL_Entidades.NomePrimary");
            strSQL.AppendLine(", CTRL_Enderecos.Logradouro, CTRL_Enderecos.Municipio");
            strSQL.AppendLine(", CTRL_Enderecos.UF, CTRL_UsuarioConfig.ativo");
            strSQL.AppendLine("from CTRL_Entidades");
            strSQL.AppendLine("join CTRL_CPFCNPJ on CTRL_CPFCNPJ.idCPFCNPJ = CTRL_Entidades.idCPFCNPJ");
            strSQL.AppendLine("join CTRL_Link_Entidade_No on CTRL_Link_Entidade_No.IdEntidade = CTRL_Entidades.IdEntidade");
            strSQL.AppendLine("join CTRL_Nos on CTRL_Nos.IdNo = CTRL_Link_Entidade_No.IdNo and CTRL_Nos.IdNo = 6");
            strSQL.AppendLine("join CTRL_Usuario on CTRL_Usuario.idEntidade = CTRL_Entidades.IdEntidade");
            strSQL.AppendLine("join CTRL_UsuarioConfig on CTRL_UsuarioConfig.idUsuario = CTRL_Usuario.idUsuario");
            strSQL.AppendLine("left join CTRL_Enderecos on CTRL_Enderecos.IdEntidade = CTRL_Entidades.IdEntidade and CTRL_Enderecos.principal = 1");

            string comandoSQL = strSQL.ToString();
            //Cria-se um novo DataSet para receber os dados da pesquisa.
            System.Data.DataSet DS = new System.Data.DataSet();
            //Concatena o comandoSQL com o sqlWhere + outras funcionálidades do comando SQL.
            comandoSQL += SqlWhere;
            //Cria-se um DataAdapter para receber o comando sql que ira fazer a consulta.
            System.Data.SqlClient.SqlDataAdapter DA;
            //Instancia-se o DataAdapter com o ComandoSQL e a conexão com o Banco de Dados.
            DA = new System.Data.SqlClient.SqlDataAdapter(comandoSQL, (System.Data.SqlClient.SqlConnection)this.aParent.Connection);
            //Preenche o DataSet.
            DA.Fill(DS);
            //Retorna o DataView o mesmo será mostrado em uma DataGrid.
            return DS.Tables[0].DefaultView;
        }


        private System.Text.StringBuilder WherePesq(Tipos.TipoPesquisa TipoPesq, string Valor)
        {
            System.Text.StringBuilder sqlWhere = new System.Text.StringBuilder();

            sqlWhere.AppendLine("WHERE 1=1 ");
            //Verifica os Tipos de Pesquisa que podem ser por ID, Nome, CPF ou Cidade.
            switch (TipoPesq)
            {
                case Tipos.TipoPesquisa.ID:
                    sqlWhere.AppendFormat("and CTRL_Entidades.IdEntidade = {0}\r\n", Valor);
                    break;

                case Tipos.TipoPesquisa.Nome:
                    sqlWhere.AppendFormat("and CTRL_Entidades.NomePrimary Like '{0}%'\r\n", Valor);
                    break;

                case Tipos.TipoPesquisa.CPF:
                    sqlWhere.AppendFormat("and CTRL_CPFCNPJ.CPFCNPJ='{0}'\r\n", Valor);
                    break;

                case Tipos.TipoPesquisa.Cidade:
                    sqlWhere.AppendFormat("and CTRL_Enderecos.Municipio Like '{0}%'\r\n", Valor);
                    break;
            }
            sqlWhere.AppendLine("ORDER BY CTRL_Entidades.NomePrimary");
            return sqlWhere;
        }


        private bool UsuarioJaCadastrado()
        {
            bool retorno = false;
            string IdEntAtual = this.aFuncionario.Entidade.ID.ToString();

            NBdbm.Fachadas.CTR.primitivas.Usuario mUsuario = new NBdbm.Fachadas.CTR.primitivas.Usuario(ref aSelf, this.aParent.LimLogin.TipoConexao, true);

            mUsuario.getUsuarioFromLogin(this.aFuncionario.Usuario.login_key);

            if (IdEntAtual == "0")
            {
                //Adicionando novo funcionário
                if (mUsuario.Campos.login_key != "")
                    retorno = true;
            }
            else
            {
                //Alteração de funcionário
                if (mUsuario.Campos.idEntidade > 0 && mUsuario.Campos.idEntidade.ToString() != IdEntAtual)
                    retorno = true;
                else if (mUsuario.Campos.idEntidade.ToString() != IdEntAtual)
                    this.aFuncionario.ExcluirUsuarioAtual(false);
            }
            mUsuario.Dispose();
            mUsuario = null;
            return retorno;
        }


        private bool ChaveDuplicada()
        {
            bool Retorno = false;
            NBdbm.Fachadas.CTR.primitivas.Entidade mEntidade = new NBdbm.Fachadas.CTR.primitivas.Entidade(ref aSelf, this.aParent.LimLogin.TipoConexao, true);

            mEntidade.getFieldsFromNomeEntidade(this.Entidade.NomeRazaoSocial_key);

            string mUserCadastrado = mEntidade.campos.NomeRazaoSocial_key.Trim();
            string mCPFCNPJCadastrado = mEntidade.campos.CPFCNPJ_key.Trim();
            string mCPFCNPJLimpo = this.Entidade.CPFCNPJ_key.Replace(".", "");

            mCPFCNPJLimpo = mCPFCNPJLimpo.Replace("-", "");
            if (mUserCadastrado == this.Entidade.NomeRazaoSocial_key.Trim() && mCPFCNPJCadastrado == mCPFCNPJLimpo.Trim())
                Retorno = true;
            mEntidade.Dispose();
            mEntidade = null;
            return Retorno;
        }


        private void VerificaMudancaChave()
        {
            if (aKeyNomeConsultado != "" && aKeyNomeConsultado != this.aFuncionario.Entidade.NomeRazaoSocial_key)
            {
                NBdbm.Fachadas.CTR.primitivas.Entidade mEntidade = new NBdbm.Fachadas.CTR.primitivas.Entidade(ref aSelf, this.aParent.LimLogin.TipoConexao, true);
                mEntidade.campos = this.aFuncionario.Entidade;
                mEntidade.filterWhere = "idEntidade=" + aIDConsultado;
                mEntidade.editar(false);
            }
        }

        /// <summary>
        /// Verifica se esta sendo incluso um novo Celular se estiver, 
        /// exclui-se o Celular Existente no banco de dados. 
        /// Isto é feito para evitar que um funcionário tenha mais que um 
        /// Celular.
        /// </summary>
        private void VerificaCelular()
        {
            //Verifica se existe um valor para Fone_key e se o Valor existente é diferente 
            //do Parametro txtCelular.
            System.Collections.ArrayList novaKey = new System.Collections.ArrayList(2);
            novaKey.Add(this.aFuncionario.Celular.DDD_key);
            novaKey.Add(this.aFuncionario.Celular.Fone_key);

            if (aFuncionario.Celular.Fone_key != "" && this.aKeyCelularConsultado.ToString() != novaKey.ToString())
            {
                NBdbm.Fachadas.CTR.primitivas.Telefone celular = new NBdbm.Fachadas.CTR.primitivas.Telefone(ref aSelf, this.aParent.LimLogin.TipoConexao, true);
                //Limpa os Filtros do objeto mCelular.
                celular.Clear_filters();
                //Aplica um Filtro Where para a procura do Celular existente no Banco de Dados.
                celular.filterWhere = "DDD='" + this.aKeyCelularConsultado[0].ToString() + "' and Fone='" + this.aKeyCelularConsultado[1].ToString() + "' and idEntidade=" + this.aFuncionario.Entidade.ID;
                //Executa o metodo excluir com base no filtro Where.
                celular.excluir(false);

            }
        }
        /// <summary>
        /// Verifica se esta sendo incluso um novo Telefone se estiver, 
        /// exclui-se o Telefone Existente no banco de dados. 
        /// Isto é feito para evitar que um funcionário tenha mais que um 
        /// Telefone.
        /// </summary>
        private void VerificaTelefone()
        {
            System.Collections.ArrayList novaKey = new System.Collections.ArrayList(2);
            novaKey.Add(this.aFuncionario.Telefone.DDD_key);
            novaKey.Add(this.aFuncionario.Telefone.Fone_key);

            if (aFuncionario.Telefone.Fone_key != "" && this.aKeyFoneConsultado.ToString() != novaKey.ToString())
            {
                NBdbm.Fachadas.CTR.primitivas.Telefone fone = new NBdbm.Fachadas.CTR.primitivas.Telefone(ref aSelf, this.aParent.LimLogin.TipoConexao, true);
                //Limpa os Filtros do objeto mCelular.
                fone.Clear_filters();
                //Aplica um Filtro Where para a procura do Celular existente no Banco de Dados.
                fone.filterWhere = "DDD='" + this.aKeyFoneConsultado[0].ToString() +
                    "' and Fone='" + this.aKeyFoneConsultado[1].ToString() +
                    "' and idEntidade=" + this.aFuncionario.Entidade.ID;
                //Executa o metodo excluir com base no filtro Where.
                fone.excluir(false);

            }
        }
        /// <summary>
        /// Verifica se esta sendo incluso um novo Endereco se estiver 
        /// exclui-se o Endereco Existente no banco de dados. 
        /// Isto é feito para evitar que um funcionário tenha mais que um 
        /// Endereco.
        /// </summary>
        private void VerificaEndereco()
        {
            string novaKey = this.aFuncionario.Endereco.Logradouro_key;

            if (aFuncionario.Endereco.Logradouro_key != "" && this.aKeyEnderecoConsultado != novaKey && this.aKeyEnderecoConsultado != "")
            {
                //Cria-se um novo objeto do Tipo Endereco
                NBdbm.Fachadas.CTR.primitivas.Endereco mEndereco = new NBdbm.Fachadas.CTR.primitivas.Endereco(ref aSelf, this.aParent.LimLogin.TipoConexao, true);
                //Limpa todos os Filtros existentes.
                mEndereco.Clear_filters();
                //Aplica o filtro Where para Achar o Endereco Existente no Banco de Dados.
                mEndereco.filterWhere = "Logradouro='" + this.aKeyEnderecoConsultado + "' and idEntidade=" + this.aFuncionario.Entidade.ID.ToString();
                //Executa o metodo excluir em base no filtro where.
                mEndereco.excluir(false);

                mEndereco.Dispose();
                mEndereco = null;
            }
        }

        /// <summary>
        /// Verifica se esta sendo incluso um novo Email se estiver 
        /// exclui-se o Email Existente no banco de dados. 
        /// Isto é feito para evitar que um funcionário tenha mais que um 
        /// Email.
        /// </summary>
        private void VerificaEmail()
        {
            string novaKey = this.aFuncionario.Email.eMail_key;
            if (aFuncionario.Email.eMail_key != "" && this.aKeyEmailConsultado != novaKey)
            {
                //Cria-se um novo objeto do Tipo Email
                NBdbm.Fachadas.CTR.primitivas.eMail mEmail = new NBdbm.Fachadas.CTR.primitivas.eMail(ref aSelf, this.aParent.LimLogin.TipoConexao, true);
                //Limpa todos os Filtros existentes.
                mEmail.Clear_filters();
                //Aplica o filtro Where para Achar o Email Existente no Banco de Dados.
                mEmail.filterWhere = "email='" + this.aKeyEmailConsultado + "' and idEntidade=" + this.aFuncionario.Entidade.ID.ToString();
                //Executa o metodo excluir em base no filtro where.
                mEmail.excluir(false);

                mEmail.Dispose();
                mEmail = null;

            }

        }


    }//end LimEntidades

}//end namespace Classes